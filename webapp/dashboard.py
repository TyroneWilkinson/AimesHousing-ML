from explainerdashboard import RegressionExplainer, ExplainerDashboard
import xgboost as xgb
import pandas as pd

from flask import Flask

app = Flask(__name__)

feature_descriptions = {
    'MSSubClass': 'Identifies the type of dwelling involved in the sale',
    'MSZoning': 'Identifies the general zoning classification of the sale',
    'LotFrontage': 'Linear feet of street connected to property',
    'LotArea': 'Lot size in square feet',
    'Street_Pave': 'Type of road access to property',
    'Alley': 'Type of alley access to property',
    'LotShape': 'General shape of property',
    'LandContour': 'Flatness of the property',
    'Utilities_NoSeWa': 'Type of utilities available',
    'LotConfig': 'Lot configuration',
    'LandSlope': 'Slope of property',
    'Neighborhood': 'Physical locations within Ames city limits',
    'Condition1': 'Proximity to various conditions',
    'Condition2': 'Proximity to various conditions (if more than one is present)',
    'BldgType': 'Type of dwelling',
    'HouseStyle': 'Style of dwelling',
    'OverallQual': 'Rates the overall material and finish of the house',
    'OverallCond': 'Rates the overall condition of the house',
    'YearBuilt': 'Original construction date',
    'YearRemodAdd': 'Remodel date (same as construction date if no remodeling or additions)',
    'RoofStyle': 'Type of roof',
    'RoofMatl': 'Roof material',
    'Exterior1st': 'Exterior covering on house',
    'Exterior2nd': 'Exterior covering on house (if more than one material)',
    'MasVnrType': 'Masonry veneer type',
    'MasVnrArea': 'Masonry veneer area in square feet',
    'ExterQual': 'Evaluates the quality of the material on the exterior',
    'ExterCond': 'Evaluates the present condition of the material on the exterior',
    'Foundation': 'Type of foundation',
    'BsmtQual': 'Evaluates the height of the basement',
    'BsmtCond': 'Evaluates the general condition of the basement',
    'BsmtExposure': 'Refers to walkout or garden level walls',
    'BsmtFinType1': 'Rating of basement finished area',
    'BsmtFinSF1': 'Type 1 finished square feet',
    'BsmtFinType2': 'Rating of basement finished area (if multiple types)',
    'BsmtFinSF2': 'Type 2 finished square feet',
    'BsmtUnfSF': 'Unfinished square feet of basement area',
    'TotalBsmtSF': 'Total square feet of basement area',
    'Heating': 'Type of heating',
    'HeatingQC': 'Heating quality and condition',
    'CentralAir_Y': 'Central air conditioning',
    'Electrical': 'Electrical system',
    '1stFlrSF': 'First Floor square feet',
    '2ndFlrSF': 'Second floor square feet',
    'LowQualFinSF': 'Low quality finished square feet (all floors)',
    'GrLivArea': 'Above grade (ground) living area square feet',
    'BsmtFullBath': 'Basement full bathrooms',
    'BsmtHalfBath': 'Basement half bathrooms',
    'FullBath': 'Full bathrooms above grade',
    'HalfBath': 'Half baths above grade',
    'Bedroom': 'Bedrooms above grade (does NOT include basement bedrooms)',
    'Kitchen': 'Kitchens above grade',
    'KitchenQual':' Kitchen quality',
    'TotRmsAbvGrd': 'Total rooms above grade (does not include bathrooms)',
    'Functional': 'Home functionality (Assume typical unless deductions are warranted)',
    'Fireplaces': 'Number of fireplaces',
    'FireplaceQu': 'Fireplace quality',
    'GarageType': 'Garage location',
    'GarageYrBlt': 'Year garage was built',
    'GarageFinish': 'Interior finish of the garage',
    'GarageCars': 'Size of garage in car capacity',
    'GarageArea': 'Size of garage in square feet',
    'GarageQual': 'Garage quality',
    'GarageCond': 'Garage condition',
    'PavedDrive': 'Paved driveway',
    'WoodDeckSF': 'Wood deck area in square feet',
    'OpenPorchSF': 'Open porch area in square feet',
    'EnclosedPorch': 'Enclosed porch area in square feet',
    '3SsnPorch': 'Three season porch area in square feet',
    'ScreenPorch': 'Screen porch area in square feet',
    'PoolArea': 'Pool area in square feet',
    'PoolQC': 'Pool quality',
    'Fence': 'Fence quality',
    'MiscFeature': 'Miscellaneous feature not covered in other categories',
    'MiscVal': 'Value of miscellaneous feature',
    'MoSold': 'Month Sold (MM)',
    'YrSold': 'Year Sold (YYYY)',
    'SaleType': 'Type of sale',
    'SaleCondition': 'Condition of sale',
    'SalePrice': 'Sale price'
}

cats = ['Alley',
 'BldgType',
 'BsmtCond',
 'BsmtExposure',
 'BsmtFinType1',
 'BsmtFinType2',
 'BsmtQual',
 'Condition1',
 'Condition2',
 'Electrical',
 'ExterCond',
 'ExterQual',
 'Exterior1st',
 'Exterior2nd',
 'Fence',
 'FireplaceQu',
 'Foundation',
 'Functional',
 'GarageCond',
 'GarageFinish',
 'GarageQual',
 'GarageType',
 'Heating',
 'HeatingQC',
 'HouseStyle',
 'KitchenQual',
 'LandContour',
 'LandSlope',
 'LotConfig',
 'LotShape',
 'MSZoning',
 'MasVnrType',
 'MiscFeature',
 'Neighborhood',
 'PavedDrive',
 'PoolQC',
 'RoofMatl',
 'RoofStyle',
 'SaleCondition',
 'SaleType']
 
model = xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.3, gamma=0.0, gpu_id=-1,
             importance_type='gain', interaction_constraints='',
             learning_rate=0.034, max_delta_step=0, max_depth=3,
             min_child_weight=1.0, monotone_constraints='()',
             n_estimators=500, n_jobs=8, num_parallel_tree=1,
             objective='reg:squarederror', random_state=42, reg_alpha=1,
             reg_lambda=0, scale_pos_weight=1.0, seed=42,
             subsample=0.6000000000000001, tree_method='exact',
             validate_parameters=1, verbosity=None)

X,Y=pd.read_csv('X.csv',index_col=0),pd.read_csv('Y.csv',index_col=0)

REmodel = model.fit(X,Y)
explainer = RegressionExplainer(REmodel, X, Y, 
                                cats=cats,
                                descriptions=feature_descriptions,
                                units="$")           

xgb_explainer = ExplainerDashboard(explainer, 
                   title='XGBoost Regression Model Explainer: Predicting House Prices',
                   description='This dashboard shows the inner workings of a fitted machine learning model, and explains its predictions.',
                   shap_interaction=False,
                   decision_trees=False,
                   server=app)
                                

@app.route("/")
def xgb_dashboard():
    return xgb_explainer.app.index()
